Docker Get Started - https://docs.docker.com/get-started/

Docker Digital Ocean - https://www.digitalocean.com/community/tutorials/como-instalar-e-utilizar-o-docker-primeiros-passos-pt

Tutorials Point - https://www.tutorialspoint.com/docker/index.htm

Docker Curriculum - https://docker-curriculum.com/

Docker Free Camp - https://medium.freecodecamp.org/docker-quick-start-video-tutorials-1dfc575522a0


Docker and cointainers: The big Picture
URL: https://app.pluralsight.com/player?course=docker-containers-big-picture&author=nigel-poulton&name=docker-containers-big-picture-m1&clip=0

Author: Nigel Poulton

1) What are containers?
- The bad old days
- Applications run business
- If the applications break, the business breaks
- Procurement lead times
- Up-front CAPEX
- Ongoing OPEX
- Hello VMWare / Hypervisor
- Hypervisors allow multiple apps per server
- Xen servers
- Slices of the physical hardware for apps in Virtual Machines
- Licences for OS
- OS as necessary evil


Containers
- Instead of OS and hypervisor, the container have only a OS, with one service for container
- OS: Driver, patching, licences, consume resources, hungry OS
- Inside the container have only the application


$ docker images

$ docker run -d --name web -p 8080:8080 nigelpoulton/pluralsight-docker-ci

$ docker stop web

$ docker start web




Docker Fundamentals

Introduction
- Operating System-Level Virtualization
- Access in Kernel with isolation
- Soft memory
	Kill a single process and relaunch imnmediately
	Do not leave idle o instances
- Security
	Limit attack space
	klil compromised
	Snap-shot replace
- Crash management
- Resiliency
- Docker Tech
	Ixc underneath



-- Instantiate a new image
$ docker run -i -t ubuntu /bin/bash


AWS
- Secure use VPC
- Docker Deployments
- EC2 > AMI




Using Docker



# Sse the port that docker are using
$ sudo docker -d &

# Download the image of ubuntu (in Docker repository)
$ sudo docker pull ubuntu

# Start services
$ sudo docker run -i -t ubuntu/bin/bash

# Exit without termination
Ctrl + p + Crtl + q 


Deamon run as root
Docker binds to a Unix Socket

Docker Group 
read/writable by docker
exclude 'sudo' on client commands



# Hello World Docker
$ docker run hello-world

# Run some ubuntu container
$ docker run -it ubuntu bash

# Get out of docker
$ exit


# See whats docker its running
$ docker ps

# See the version
$ docker versionx

# Search some version
$ docker search ubuntu

# Pull some specific image
$ docker pull learn/tutorial

# Test the image
$ docker run learn/tutorial echo "Hello World"





Docker Repositories
Hosted collection of tagged images
- Tag shows who and where
- One to many repos per registry

index.docker.io
- Top leval repositories
- Primary central index
- Implicit registry @ index.docker.io


Docker repositories
- Sharing repositories
- Docker act as client in:
	- Search
	- Pull
	- Login
	- Push


Docker Repositories
- Top Level (Docker Team)
- User repositories
- Search online: http://index.docker.io

# Search some image of CentOS
$ docker search centos




Working Examples

Node.js application

# Environment
$ git clone git@github.com:hackndoes/bearded-tribble.git

# Build the image / RPM Process
$ docker build -t adron/bearded-tribble .

# See the messages
$ docker images

# Check
$ docker ps

# kill some docker image
$ docker kill <<name in ps>>

$ docker run -p 49169:8080 -d adron/bearded-tribble

# Run image as a container
$ docker run -i -t c2d4f2672765 /bin/bash

$ docker ps

$ docker logs 786cc3b686c6





# CouchDB
$ docker pull couchdb




Docker Advanced
1) Overview
2) Course Introduction
  - Focus on core Docker engine and images
What We'll learn
  - Linux Containers
    - Containers x Virtual Machines
    - kernel namespaces, cgropus, Capabilities
  - Docker Engine
    - Execution Driver: libcontainer vs LXC
    - AUFS, OverlayFS, Device Mapper
  - Docker Images
    - $ docker build
    - $ docker images
    - $ docker inspect
    - Union monts, Layering, Dockerfile
  - Docker Containers
    - $ docker start
    - $ docker stop
    - $ docker restart
  - Registries, Volumes, Networking

Prerequisites
 - Basic computer knowledge
 - 1 or 2 linux machines

3) Introducing Containers
- The rise of virtual machines 
  - It's all about applications
  - Build services and applications in server-application 1:1 manner in some dedicated way
  - Avoid massive waste of resources with computation capabilities
  - Avoid to waste computation in the physical resources
  - Less CAPEX or OPEX
  - Virtualization: KVM, vmware, Xen
  - Old days: Physical Machine > OS > Application
  - Virtual Machine Days: Physical Machine > Hypervisor > VM > OS > App
- The ogly virtual machine
  - The OS exists only to make the applications easier to run
  - We'll need only to replicate the number of the OS's
  - More licencing for OSs
  - OS <> Business Value
  - Patching, Maintaining, overhead

What are Containers
- The container are lightweight in comparison with OS and provide the isolation of the VM
- User space in linux
- Create multiples isolates name spaces (User space)
- In the old VM world we need an OS for any application in 1:1 approach
- The container it's a lightweight OS with a Kernel that consumes less resources than the VM 

Containers under the hood
- Contrainers fix the problem of isolation keeping different userspaces for each application
- Problems that containers solve Root file routines > Processes over the OS > Network processess
- Each application with your vision of the process tree, root directory and network routing 
- Kernel Namespaces partition the resources and makes the isolation
- The "pid" namespace, "net", "mnt", "user"
- Control Groups (cgroups): Group resources and set limits for each namespace/containers 
- The cgroups are far more flexible than Hypervisors
- cgroup-x = container-a 
- Capabilities: Fine control of the resources and assign small privileges (AUDIT_CONTROL, CHOWN, DAC_OVERRIDE, NET_BIND_SERVICE, SETUPID)
- Linux Kernel = Namespaces | groups | capabilities

Docker
- Container run-time
- Uniform standard engine runtime
- Portability in the deamon
- Application portability
- LXC as execution driver in the middle in the past
- libcontainer is the replacement for the LXC
- libcontainer allows Docker to be cross platform

The future of Docker
- Suport Docker in Windows
- Write-one and run in everywere
- Chip-level assists for containers
- GPUs using the same concept of container
- Support new archtectures like microservices

4) Installing Ubuntu Linux and CentOS Linux
  - Download and install Ubuntu and CentOS

5) Installing and Updating Docker
- Module Intro

- Run an image of CentOS
$ docker run -it centos /bin/bash

- Test in Shell
$ ping 8.8.8.8

- See processes
$ ps -elf

- See the host name
$ cat etc/hosts

- See the IP
$ ip a

- Look the kernel
$ uname -a

- See the release
$ cat etc/redhat-release

- See if the apt-get fails (it expected that fails)
$ apt-get update

- See the yum (the Redhat package manager)
$ yum check-update

- What's happen with some data that are stored in the Docker Container?

- Let's install Vim
$ yum install vim

- Open Vim
$ vim /tmp/testfile

$ cat /tmp/testfile

- Let's stop de container
$ exit

- Let's check with Docker ps
$ docker ps

- See all containers
$ docker ps -a

- Check our container
$ ls -l /var/lib/docker/aufs/diff

- With our number, we can see all the files
$ ls -l /var/lib/docker/aufs/diff/ff7eri786qwf674fq6wef4765ef98q78f5ewq

- Let's check the file in tmp directory 
$ ls -l /var/lib/docker/aufs/diff/ff7eri786qwf674fq6wef4765ef98q78f5ewq/tmp

- Let's check our data
$ cat /var/lib/docker/aufs/diff/ff7eri786qwf674fq6wef4765ef98q78f5ewq/tmp/testfile

- Starting the container again
$ docker start ff7iu87e6w

- Attach the container
$ docker attach ff7iu87e6w

$ cat tmp/testfile































